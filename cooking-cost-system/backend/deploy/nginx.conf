# 料理原価計算システム - Nginx設定
# 本番環境用のリバースプロキシ設定

upstream cooking_backend {
    # バックエンドサーバーの設定
    server backend:3001;
    # 複数のインスタンスがある場合
    # server backend_2:3001;
    # server backend_3:3001;
    
    # ヘルスチェック
    keepalive 32;
}

# レート制限設定
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;

# ログ形式の定義
log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for" '
                'rt=$request_time uct="$upstream_connect_time" '
                'uht="$upstream_header_time" urt="$upstream_response_time"';

server {
    listen 80;
    server_name cooking-cost-api.example.com;
    
    # HTTP から HTTPS へのリダイレクト
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name cooking-cost-api.example.com;
    
    # SSL証明書設定
    ssl_certificate /etc/ssl/certs/cooking-cost-api.crt;
    ssl_certificate_key /etc/ssl/private/cooking-cost-api.key;
    
    # SSL設定
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # セキュリティヘッダー
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self'; font-src 'self'; object-src 'none'; media-src 'self'; frame-src 'none';" always;
    
    # アクセスログ
    access_log /var/log/nginx/cooking-cost-api.access.log main;
    error_log /var/log/nginx/cooking-cost-api.error.log warn;
    
    # 基本設定
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    keepalive_timeout 65s;
    
    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/plain
        text/css
        text/xml
        text/javascript
        text/x-component
        text/x-cross-domain-policy;
    
    # API エンドポイント
    location /api/ {
        # レート制限
        limit_req zone=api burst=20 nodelay;
        
        # プロキシ設定
        proxy_pass http://cooking_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Nginx-Proxy true;
        
        # タイムアウト設定
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # キャッシュ無効化
        proxy_cache_bypass $http_upgrade;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # アップロード API（厳しいレート制限）
    location /api/upload/ {
        limit_req zone=upload burst=5 nodelay;
        
        proxy_pass http://cooking_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # ファイルアップロード用の設定
        client_max_body_size 10M;
        proxy_request_buffering off;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # 認証 API（最も厳しいレート制限）
    location /api/auth/ {
        limit_req zone=auth burst=3 nodelay;
        
        proxy_pass http://cooking_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 静的ファイル（アップロードされたファイル）
    location /uploads/ {
        alias /var/www/cooking-cost-system/uploads/;
        
        # キャッシュ設定
        expires 7d;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff always;
        
        # セキュリティ設定
        location ~* \.(php|php\d+|phtml|pl|py|jsp|asp|aspx|cgi)$ {
            deny all;
        }
        
        # ファイルサイズ制限
        client_max_body_size 10M;
        
        # 画像の自動最適化（nginx-image-filter使用時）
        # location ~* \.(jpg|jpeg|png|gif)$ {
        #     image_filter resize 800 600;
        #     image_filter_jpeg_quality 85;
        # }
    }
    
    # ヘルスチェック
    location /health {
        proxy_pass http://cooking_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }
    
    # メトリクス（Prometheus）
    location /metrics {
        proxy_pass http://cooking_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        # 内部ネットワークからのみアクセス許可
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # ルートパス
    location / {
        proxy_pass http://cooking_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # セキュリティ関連のパスを隠す
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 不要なファイルへのアクセスを拒否
    location ~* \.(sql|log|txt|conf|bak)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /uploads/\n";
    }
    
    # favicon.ico
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        return 204;
    }
}

# ================================
# deploy/docker-compose.prod.yml - 本番環境用Docker Compose
# ================================

version: '3.8'

services:
  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: cooking_cost_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/ssl
      - ../uploads:/var/www/cooking-cost-system/uploads:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - cooking_network

  # データベース
  database:
    image: mysql:8.0
    container_name: cooking_cost_db_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_config:/etc/mysql/conf.d
      - mysql_logs:/var/log/mysql
    networks:
      - cooking_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2

  # Redis キャッシュ
  redis:
    image: redis:7-alpine
    container_name: cooking_cost_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - cooking_network
    command: redis-server /usr/local/etc/redis/redis.conf
    sysctls:
      - net.core.somaxconn=1024

  # バックエンドAPI
  backend:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: cooking_cost_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
    volumes:
      - ../uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - cooking_network
    depends_on:
      - database
      - redis
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ログ管理（Fluentd）
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: cooking_cost_fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf
      - nginx_logs:/var/log/nginx:ro
      - app_logs:/var/log/app:ro
      - mysql_logs:/var/log/mysql:ro
    networks:
      - cooking_network
    depends_on:
      - backend

  # 監視（Prometheus）
  prometheus:
    image: prom/prometheus:latest
    container_name: cooking_cost_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cooking_network
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # グラフィカル監視（Grafana）
  grafana:
    image: grafana/grafana:latest
    container_name: cooking_cost_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - cooking_network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

networks:
  cooking_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql_data:
  mysql_config:
  mysql_logs:
  redis_data:
  app_logs:
  nginx_logs:
  prometheus_data:
  grafana_data:

# ================================
# deploy/.env.production - 本番環境変数テンプレート
# ================================

# アプリケーション設定
NODE_ENV=production
PORT=3001

# データベース設定
DB_HOST=database
DB_PORT=3306
DB_NAME=cooking_cost_system
DB_USER=cooking_user
DB_PASSWORD=your_secure_db_password_here
DB_ROOT_PASSWORD=your_secure_root_password_here

# Redis設定
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=your_secure_redis_password_here

# セキュリティ設定
JWT_SECRET=your_very_secure_jwt_secret_key_here_min_32_chars
CORS_ORIGIN=https://cooking-cost-app.example.com

# ファイル設定
MAX_FILE_SIZE=10485760
UPLOAD_DIR=/app/uploads

# ログ設定
LOG_LEVEL=info

# 監視設定
GRAFANA_PASSWORD=your_secure_grafana_password_here

# SSL設定
SSL_CERT_PATH=/etc/ssl/certs/cooking-cost-api.crt
SSL_KEY_PATH=/etc/ssl/private/cooking-cost-api.key

# 外部サービス設定（将来用）
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your_email@gmail.com
# SMTP_PASSWORD=your_app_password
# BACKUP_S3_BUCKET=cooking-cost-backups
# BACKUP_S3_REGION=ap-northeast-1
