# ================================
# Kubernetes デプロイメント設定
# ================================

apiVersion: v1
kind: Namespace
metadata:
  name: cooking-cost-system
  labels:
    app: cooking-cost-system
    environment: production

---
# ================================
# ConfigMap - 設定データ
# ================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: cooking-cost-config
  namespace: cooking-cost-system
data:
  NODE_ENV: "production"
  PORT: "3001"
  DB_HOST: "mysql-service"
  DB_PORT: "3306"
  DB_NAME: "cooking_cost_system"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://cooking-system.com"
  MAX_FILE_SIZE: "10485760"
  UPLOAD_DIR: "/app/uploads"

---
# ================================
# Secret - 機密データ
# ================================

apiVersion: v1
kind: Secret
metadata:
  name: cooking-cost-secrets
  namespace: cooking-cost-system
type: Opaque
data:
  # Base64エンコードされた値
  DB_USER: Y29va2luZ191c2Vy  # cooking_user
  DB_PASSWORD: Y29va2luZ19wYXNzd29yZA==  # cooking_password
  JWT_SECRET: eW91ci1qd3Qtc2VjcmV0LWtleQ==  # your-jwt-secret-key

---
# ================================
# PersistentVolume - ストレージ
# ================================

apiVersion: v1
kind: PersistentVolume
metadata:
  name: cooking-cost-uploads-pv
  namespace: cooking-cost-system
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/cooking-cost/uploads

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cooking-cost-uploads-pvc
  namespace: cooking-cost-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# ================================
# MySQL データベース
# ================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: cooking-cost-system
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root_password"
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: cooking-cost-config
              key: DB_NAME
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: cooking-cost-secrets
              key: DB_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cooking-cost-secrets
              key: DB_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mysql
            - -h
            - localhost
            - -u
            - root
            - -p${MYSQL_ROOT_PASSWORD}
            - -e
            - "SELECT 1"
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: init-scripts
        configMap:
          name: mysql-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: cooking-cost-system
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: cooking-cost-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# ================================
# Redis (キャッシュ・セッション用)
# ================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: cooking-cost-system
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: cooking-cost-system
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
# ================================
# Backend API アプリケーション
# ================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cooking-cost-backend
  namespace: cooking-cost-system
  labels:
    app: cooking-cost-backend
    version: v2.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cooking-cost-backend
  template:
    metadata:
      labels:
        app: cooking-cost-backend
        version: v2.0.0
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z mysql-service 3306; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"
      containers:
      - name: backend
        image: cooking-cost-backend:v2.0.0
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: cooking-cost-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: cooking-cost-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: cooking-cost-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: cooking-cost-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: cooking-cost-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: cooking-cost-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cooking-cost-secrets
              key: DB_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: cooking-cost-secrets
              key: JWT_SECRET
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        volumeMounts:
        - name: uploads-storage
          mountPath: /app/uploads
        - name: logs-storage
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: uploads-storage
        persistentVolumeClaim:
          claimName: cooking-cost-uploads-pvc
      - name: logs-storage
        emptyDir: {}
      securityContext:
        fsGroup: 1001
      restartPolicy: Always

---
# ================================
# Service - Backend API
# ================================

apiVersion: v1
kind: Service
metadata:
  name: cooking-cost-backend-service
  namespace: cooking-cost-system
  labels:
    app: cooking-cost-backend
spec:
  selector:
    app: cooking-cost-backend
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 3001
  type: ClusterIP

---
# ================================
# Ingress - 外部アクセス
# ================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cooking-cost-ingress
  namespace: cooking-cost-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.cooking-system.com
    secretName: cooking-cost-tls
  rules:
  - host: api.cooking-system.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cooking-cost-backend-service
            port:
              number: 80

---
# ================================
# HorizontalPodAutoscaler - 自動スケーリング
# ================================

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cooking-cost-backend-hpa
  namespace: cooking-cost-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cooking-cost-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# ================================
# NetworkPolicy - ネットワークセキュリティ
# ================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cooking-cost-network-policy
  namespace: cooking-cost-system
spec:
  podSelector:
    matchLabels:
      app: cooking-cost-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ================================
# ServiceMonitor - Prometheus監視
# ================================

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: cooking-cost-backend-monitor
  namespace: cooking-cost-system
  labels:
    app: cooking-cost-backend
spec:
  selector:
    matchLabels:
      app: cooking-cost-backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
