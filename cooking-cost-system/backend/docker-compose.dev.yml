# 開発環境用 Docker Compose 設定
version: '3.8'

services:
  # データベース（開発用）
  database:
    image: mysql:8.0
    container_name: cooking_cost_db_dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: dev_root_password
      MYSQL_DATABASE: cooking_cost_system
      MYSQL_USER: cooking_user
      MYSQL_PASSWORD: cooking_password
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./config/mysql/dev.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - cooking_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      --general-log=1
      --general-log-file=/var/lib/mysql/general.log
      --slow-query-log=1
      --slow-query-log-file=/var/lib/mysql/slow.log
      --long-query-time=1

  # Redis（開発用）
  redis:
    image: redis:7-alpine
    container_name: cooking_cost_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
      - ./config/redis/dev.conf:/usr/local/etc/redis/redis.conf
    networks:
      - cooking_network
    command: redis-server /usr/local/etc/redis/redis.conf

  # バックエンドAPI（開発用）
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: cooking_cost_backend_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: cooking_cost_system
      DB_USER: cooking_user
      DB_PASSWORD: cooking_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-jwt-secret-key
      LOG_LEVEL: debug
    ports:
      - "3001:3001"
      - "9229:9229" # Node.js デバッガー用
    volumes:
      - ./src:/app/src:cached
      - ./config:/app/config:cached
      - ./package.json:/app/package.json:cached
      - ./tsconfig.json:/app/tsconfig.json:cached
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - /app/node_modules
    networks:
      - cooking_network
    depends_on:
      - database
      - redis
    command: npm run dev
    stdin_open: true
    tty: true

  # MailHog（メール開発用）
  mailhog:
    image: mailhog/mailhog:latest
    container_name: cooking_cost_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - cooking_network

  # phpMyAdmin（データベース管理用）
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: cooking_cost_phpmyadmin_dev
    restart: unless-stopped
    environment:
      PMA_HOST: database
      PMA_PORT: 3306
      PMA_USER: cooking_user
      PMA_PASSWORD: cooking_password
      MYSQL_ROOT_PASSWORD: dev_root_password
      PMA_THEME: metro
    ports:
      - "8080:80"
    networks:
      - cooking_network
    depends_on:
      - database

  # Redis Commander（Redis管理用）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cooking_cost_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - cooking_network
    depends_on:
      - redis

  # Nginx（開発用プロキシ）
  nginx-dev:
    image: nginx:alpine
    container_name: cooking_cost_nginx_dev
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./config/nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ./uploads:/var/www/uploads:ro
    networks:
      - cooking_network
    depends_on:
      - backend

volumes:
  mysql_dev_data:
  redis_dev_data:

networks:
  cooking_network:
    driver: bridge

# ================================
# docker-compose.test.yml - テスト用設定
# ================================

---
version: '3.8'

services:
  # テスト用データベース
  database-test:
    image: mysql:8.0
    container_name: cooking_cost_db_test
    environment:
      MYSQL_ROOT_PASSWORD: test_root_password
      MYSQL_DATABASE: cooking_cost_system_test
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_password
    ports:
      - "3307:3306"
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - test_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    tmpfs:
      - /var/lib/mysql

  # テスト用Redis
  redis-test:
    image: redis:7-alpine
    container_name: cooking_cost_redis_test
    ports:
      - "6380:6379"
    networks:
      - test_network
    tmpfs:
      - /data

  # テスト用バックエンド
  backend-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: cooking_cost_backend_test
    environment:
      NODE_ENV: test
      PORT: 3001
      DB_HOST: database-test
      DB_PORT: 3306
      DB_NAME: cooking_cost_system_test
      DB_USER: test_user
      DB_PASSWORD: test_password
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      JWT_SECRET: test-jwt-secret
      LOG_LEVEL: error
    ports:
      - "3002:3001"
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./jest.config.js:/app/jest.config.js:ro
    networks:
      - test_network
    depends_on:
      - database-test
      - redis-test
    command: npm test

networks:
  test_network:
    driver: bridge

# ================================
# Dockerfile.test - テスト用Dockerfile
# ================================

---
FROM node:18-alpine AS test

WORKDIR /app

# パッケージファイルをコピー
COPY package*.json ./

# 依存関係インストール（devDependencies含む）
RUN npm ci

# ソースコードをコピー
COPY . .

# テスト実行用のヘルスチェック
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD npm run test:health || exit 1

# デフォルトコマンド
CMD ["npm", "test"]

# ================================
# config/nginx/dev.conf - 開発用Nginx設定
# ================================

---
upstream backend_dev {
    server backend:3001;
}

server {
    listen 80;
    server_name localhost;

    # ログ設定
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # API エンドポイント
    location /api/ {
        proxy_pass http://backend_dev;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # CORS headers for development
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        
        if ($request_method = 'OPTIONS') {
            return 200;
        }
    }

    # 静的ファイル
    location /uploads/ {
        alias /var/www/uploads/;
        add_header Access-Control-Allow-Origin *;
    }

    # ヘルスチェック
    location /health {
        proxy_pass http://backend_dev;
        access_log off;
    }

    # デフォルトページ
    location / {
        proxy_pass http://backend_dev;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# ================================
# config/mysql/dev.cnf - 開発用MySQL設定
# ================================

---
[mysqld]
# 開発用設定
general_log = 1
general_log_file = /var/lib/mysql/general.log
slow_query_log = 1
slow_query_log_file = /var/lib/mysql/slow.log
long_query_time = 1

# パフォーマンス設定（開発用）
innodb_buffer_pool_size = 128M
innodb_log_file_size = 32M
max_connections = 100
query_cache_size = 32M
query_cache_type = 1

# 文字セット設定
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci

# タイムゾーン
default-time-zone = '+09:00'

# SQL モード
sql-mode = STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO

[mysql]
default-character-set = utf8mb4

[client]
default-character-set = utf8mb4

# ================================
# config/redis/dev.conf - 開発用Redis設定
# ================================

---
# 開発用 Redis 設定
bind 0.0.0.0
port 6379
timeout 0
tcp-keepalive 300

# データ永続化
save 900 1
save 300 10
save 60 10000

# ログレベル
loglevel notice

# メモリ設定
maxmemory 128mb
maxmemory-policy allkeys-lru

# AOF設定
appendonly yes
appendfsync everysec

# セキュリティ（開発用なのでパスワードなし）
# requirepass yourpassword

# データベース数
databases 16

# 日本語コメント
# 開発環境用のRedis設定
# セキュリティは緩めに設定
