name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # コードの品質チェック
  # ================================
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Check TypeScript types
        working-directory: ./backend
        run: npm run typecheck

      - name: Check code formatting
        working-directory: ./backend
        run: |
          npm run lint -- --max-warnings=0
          # Prettierチェックがある場合
          # npx prettier --check "src/**/*.{ts,js,json}"

  # ================================
  # セキュリティスキャン
  # ================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run npm audit
        working-directory: ./backend
        run: npm audit --audit-level=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ================================
  # 単体テスト
  # ================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: cooking_cost_system_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"test_root_password" --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"

      - name: Setup test database
        working-directory: ./backend
        run: |
          mysql -h127.0.0.1 -P3306 -uroot -ptest_root_password < database/init/01_create_tables.sql
          mysql -h127.0.0.1 -P3306 -uroot -ptest_root_password cooking_cost_system_test < database/init/02_sample_data.sql

      - name: Run tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: cooking_cost_system_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret
        run: npm test

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: cooking_cost_system_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: unittests
          name: backend-coverage

  # ================================
  # 統合テスト
  # ================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test environment
        run: |
          cd backend
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d --build

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run integration tests
        run: |
          cd backend
          docker-compose exec -T backend npm run test:integration

      - name: Collect logs
        if: failure()
        run: |
          cd backend
          docker-compose logs > integration-test-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: backend/integration-test-logs.txt

      - name: Cleanup
        if: always()
        run: |
          cd backend
          docker-compose down -v

  # ================================
  # ビルドテスト
  # ================================
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Test built application
        working-directory: ./backend
        run: |
          # ビルドされたファイルの存在確認
          [ -f "dist/server.js" ] || exit 1
          [ -f "dist/app.js" ] || exit 1
          echo "Build artifacts verified successfully"

  # ================================
  # Dockerイメージビルド
  # ================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-test, unit-tests]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ================================
  # セキュリティスキャン（Docker）
  # ================================
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.docker-build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ================================
  # パフォーマンステスト
  # ================================
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test environment
        run: |
          cd backend
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for application
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          cd backend/tests/performance
          k6 run --out json=results.json performance-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: backend/tests/performance/results.json

      - name: Cleanup
        if: always()
        run: |
          cd backend
          docker-compose down -v

  # ================================
  # デプロイメント（ステージング）
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build, docker-security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # 実際のデプロイメント処理をここに実装
          # kubectl apply -f k8s/staging/
          # または Docker Compose での更新など

      - name: Run smoke tests
        run: |
          # ステージング環境でのスモークテスト
          timeout 60 bash -c 'until curl -f https://staging-api.example.com/health; do sleep 2; done'
          curl -f https://staging-api.example.com/api/ingredients

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================
  # デプロイメント（本番）
  # ================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build, docker-security-scan, performance-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create backup
        run: |
          echo "Creating production backup..."
          # バックアップスクリプトの実行

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # 本番環境へのデプロイメント処理

      - name: Run post-deployment tests
        run: |
          # 本番環境でのヘルスチェック
          timeout 60 bash -c 'until curl -f https://api.example.com/health; do sleep 2; done'
          curl -f https://api.example.com/api/ingredients

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment completed successfully'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================
  # リリースノート作成
  # ================================
  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        run: |
          # 前回のリリースからの変更点を取得
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > release-notes.md

      - name: Update release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: context.payload.release.body + '\n\n## Changes\n' + releaseNotes
            });

# ================================
# 依存関係の自動更新
# ================================
  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for outdated packages
        working-directory: ./backend
        run: |
          npm outdated > outdated-packages.txt || true
          if [ -s outdated-packages.txt ]; then
            echo "Outdated packages found:"
            cat outdated-packages.txt
          else
            echo "All packages are up to date"
          fi

      - name: Create issue for outdated packages
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('backend/outdated-packages.txt')) {
              const outdated = fs.readFileSync('backend/outdated-packages.txt', 'utf8');
              if (outdated.trim()) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'Outdated Dependencies Found',
                  body: '```\n' + outdated + '\n```',
                  labels: ['dependencies', 'maintenance']
                });
              }
            }
